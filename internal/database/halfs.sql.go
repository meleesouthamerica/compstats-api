// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: halfs.sql

package database

import (
	"context"
	"database/sql"
)

const createHalf = `-- name: CreateHalf :one
INSERT INTO halfs (
  map_name,
  team_1,
  team_2,
  tournament_id
) VALUES (?, ?, ?, ?) RETURNING id, map_name, team_1, team_2, tournament_id, created_at, updated_at
`

type CreateHalfParams struct {
	MapName      string `json:"mapName"`
	Team1        string `json:"team1"`
	Team2        string `json:"team2"`
	TournamentID int64  `json:"tournamentId"`
}

func (q *Queries) CreateHalf(ctx context.Context, arg CreateHalfParams) (Half, error) {
	row := q.db.QueryRowContext(ctx, createHalf,
		arg.MapName,
		arg.Team1,
		arg.Team2,
		arg.TournamentID,
	)
	var i Half
	err := row.Scan(
		&i.ID,
		&i.MapName,
		&i.Team1,
		&i.Team2,
		&i.TournamentID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteHalfByID = `-- name: DeleteHalfByID :exec
DELETE FROM halfs WHERE id = ?
`

func (q *Queries) DeleteHalfByID(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteHalfByID, id)
	return err
}

const findHalfByID = `-- name: FindHalfByID :one
SELECT id, map_name, team_1, team_2, tournament_id, created_at, updated_at
FROM halfs
WHERE id = ?
`

func (q *Queries) FindHalfByID(ctx context.Context, id int64) (Half, error) {
	row := q.db.QueryRowContext(ctx, findHalfByID, id)
	var i Half
	err := row.Scan(
		&i.ID,
		&i.MapName,
		&i.Team1,
		&i.Team2,
		&i.TournamentID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getAllHalfs = `-- name: GetAllHalfs :many
SELECT id, map_name, team_1, team_2, tournament_id, created_at, updated_at FROM halfs
ORDER BY id DESC
`

func (q *Queries) GetAllHalfs(ctx context.Context) ([]Half, error) {
	rows, err := q.db.QueryContext(ctx, getAllHalfs)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Half
	for rows.Next() {
		var i Half
		if err := rows.Scan(
			&i.ID,
			&i.MapName,
			&i.Team1,
			&i.Team2,
			&i.TournamentID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateHalfByID = `-- name: UpdateHalfByID :one
UPDATE halfs
SET
  map_name = COALESCE(?1, map_name),
  team_1 = COALESCE(?2, team_1),
  team_2 = COALESCE(?3, team_2),
  updated_at = CURRENT_TIMESTAMP
WHERE
  id = ?4
RETURNING id, map_name, team_1, team_2, tournament_id, created_at, updated_at
`

type UpdateHalfByIDParams struct {
	MapName sql.NullString `json:"mapName"`
	Team1   sql.NullString `json:"team1"`
	Team2   sql.NullString `json:"team2"`
	ID      int64          `json:"id"`
}

func (q *Queries) UpdateHalfByID(ctx context.Context, arg UpdateHalfByIDParams) (Half, error) {
	row := q.db.QueryRowContext(ctx, updateHalfByID,
		arg.MapName,
		arg.Team1,
		arg.Team2,
		arg.ID,
	)
	var i Half
	err := row.Scan(
		&i.ID,
		&i.MapName,
		&i.Team1,
		&i.Team2,
		&i.TournamentID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
